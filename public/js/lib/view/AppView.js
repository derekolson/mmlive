// Generated by CoffeeScript 1.6.3
/*
 Main Application View
 Sets up EaselJS stage / canvas
*/


(function() {
  define(['jquery', 'hogan', 'text!../../templates/alertbox.html', 'ServiceManager'], function($, Hogan, template, ServiceManager) {
    var AppView;
    return AppView = (function() {
      function AppView() {
        this.buildGridView();
        this.buildAlertView();
        $('#mainVideo').click(function() {
          return $('#mainVideo').fadeOut('fast');
        });
      }

      AppView.prototype.buildAlertView = function() {
        var alertboxCompiled, data;
        data = {
          alertTitle: 'Jenkins Alert (Compass)',
          alertBody: 'Derek Olson broke the build!'
        };
        alertboxCompiled = Hogan.compile(template);
        $('#alertHolder').hide();
        $('#alertHolder').html(alertboxCompiled.render(data));
        return $(window).keyup(function(e) {
          if (e.keyCode === 32) {
            $('#alertHolder').fadeIn('fast');
            return setTimeout(function() {
              return $('#alertHolder').fadeOut('slow');
            }, 15000);
          }
        });
      };

      AppView.prototype.buildGridView = function() {
        var colorCount, colors, i, numTiles, numTilesVert, screenHeight, screenWidth, tile, tileHeight, tileWidth, _i, _ref, _results;
        colors = ['color1', 'color2', 'color3', 'color4', 'color5', 'color6', 'color7'];
        this.tiles = [];
        screenWidth = $(window).width();
        screenHeight = $(window).height();
        tileWidth = tileHeight = screenWidth / 4;
        numTilesVert = Math.floor(screenHeight / tileHeight);
        numTiles = numTilesVert * 4;
        colorCount = 0;
        _results = [];
        for (i = _i = 0, _ref = numTiles - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          tile = $('<div></div>');
          tile.addClass('gridItem' + ' ' + colors[colorCount]);
          tile.css({
            width: tileWidth,
            height: tileHeight
          });
          $('#remoteVideos').append(tile);
          ++colorCount;
          if (colorCount > colors.length - 1) {
            colorCount = 0;
          }
          _results.push(this.tiles.push(tile));
        }
        return _results;
      };

      AppView.prototype.addVideo = function(video, location) {
        var index, locEl, tile;
        index = Math.floor(Math.random() * this.tiles.length);
        tile = this.tiles.splice(index, 1)[0];
        console.log(this.tiles);
        locEl = $('<h2></h2>');
        locEl.addClass('locale');
        locEl.html(location);
        tile.append(video);
        tile.append(locEl);
        return tile.click(function() {
          $('#mainVideo video')[0].src = video.src;
          $('#mainVideo').fadeIn('fast');
          return $('#mainVideo h2').html(location);
        });
      };

      AppView.prototype.removeVideo = function(video) {
        var tile;
        tile = $(video.parentNode);
        tile.empty();
        tile.unbind("click");
        return this.tiles.push(tile);
      };

      return AppView;

    })();
  });

}).call(this);
